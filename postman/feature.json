{
	"info": {
		"_postman_id": "898854b6-a141-4504-9b8d-bd5e3ca7c928",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26120352"
	},
	"item": [
		{
			"name": "Private",
			"item": [
				{
					"name": "Добавление нового пользователя Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let user;\r",
									"    try {\r",
									"        user = rnd.getUser();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(user),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('email');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового события Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        event = rnd.getEvent(category.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(event),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('title');\r",
									"pm.expect(target).to.have.property('annotation');\r",
									"pm.expect(target).to.have.property('category');\r",
									"pm.expect(target).to.have.property('paid');\r",
									"pm.expect(target).to.have.property('eventDate');\r",
									"pm.expect(target).to.have.property('initiator');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('participantLimit');\r",
									"pm.expect(target).to.have.property('state');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('requestModeration');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
									"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
									"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
									"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
									"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
									"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
									"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id текущего пользователя"
								}
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				},
				{
					"name": "\"Ответ должен содержать код статуса 201 и данные в формате json\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        pm.collectionVariables.set(\"deluid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        pm.collectionVariables.set(\"commdel\", 1)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.sender).to.be.not.null;\r",
									"    pm.expect(target.content).to.be.not.null;\r",
									"    pm.expect(target.usefulness).to.be.not.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "\"Ответ должен содержать код статуса 200 и измененные данные + updated",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.not.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).to.be.not.null;\r",
									"    pm.expect(target.content).equal(source.content, \"Проснувшись однажды утром после беспокойного сна, Грегор Замза обнаружил, что он у себя в постели превратился в страшное насекомое. Лежа на панцирнотвердой спине, он видел, стоило ему приподнять голову, свой коричневый, выпуклый, разделенный дугообразными чешуйками живот, на верхушке которого еле держалось готовое вот-вот окончательно сползти одеяло. Его многочисленные, убого тонкие по сравнению с остальным телом ножки беспомощно копошились у него перед глазами. «Что со мной случилось?» – подумал он. Это не было сном. Его комната, настоящая, разве что слишком маленькая, но обычная комната, мирно покоилась в своих четырех хорошо знакомых стенах. Над столом, где были разложены распакованные образцы сукон – Замза был коммивояжером, – висел портрет, который он недавно вырезал из иллюстрированного журнала и вставил в красивую золоченую рамку. На портрете была изображена дама в меховой шляпе и боа, она сидела очень прямо и протягивала зрителю тяжелую меховую муфту, в которой целиком исчезала ее рука. Затем взгляд Грегора устремился в окно, и пасмурная погода – слышно было, как по жести подоконника стучат капли дождя – привела его и вовсе в грустное настроение. «Хорошо бы еще немного поспать и забыть всю эту чепуху», – подумал он, но это было совершенно неосуществимо, он привык спать на правом боку, а в теперешнем своем состоянии он никак не мог принять этого положения. С какой бы силой ни поворачивался он на правый бок, он неизменно сваливался опять на спину. Закрыв глаза, чтобы не видеть своих барахтающихся ног, он проделал это добрую сотню раз и отказался от этих попыток только тогда, когда почувствовал какую-то неведомую дотоле, тупую и слабую боль в боку. «Ах ты, господи, – подумал он, – какую я выбрал хлопотную профессию! Изо дня в день в разъездах. Деловых волнений куда больше, чем на месте, в торговом доме, а кроме того, изволь терпеть тяготы дороги, думай о расписании поездов, мирись с плохим, нерегулярным питанием, завязывай со все новыми и новыми людьми недолгие\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n \"text\": \"Проснувшись однажды утром после беспокойного сна, Грегор Замза обнаружил, что он у себя в постели превратился в страшное насекомое. Лежа на панцирнотвердой спине, он видел, стоило ему приподнять голову, свой коричневый, выпуклый, разделенный дугообразными чешуйками живот, на верхушке которого еле держалось готовое вот-вот окончательно сползти одеяло. Его многочисленные, убого тонкие по сравнению с остальным телом ножки беспомощно копошились у него перед глазами. «Что со мной случилось?» – подумал он. Это не было сном. Его комната, настоящая, разве что слишком маленькая, но обычная комната, мирно покоилась в своих четырех хорошо знакомых стенах. Над столом, где были разложены распакованные образцы сукон – Замза был коммивояжером, – висел портрет, который он недавно вырезал из иллюстрированного журнала и вставил в красивую золоченую рамку. На портрете была изображена дама в меховой шляпе и боа, она сидела очень прямо и протягивала зрителю тяжелую меховую муфту, в которой целиком исчезала ее рука. Затем взгляд Грегора устремился в окно, и пасмурная погода – слышно было, как по жести подоконника стучат капли дождя – привела его и вовсе в грустное настроение. «Хорошо бы еще немного поспать и забыть всю эту чепуху», – подумал он, но это было совершенно неосуществимо, он привык спать на правом боку, а в теперешнем своем состоянии он никак не мог принять этого положения. С какой бы силой ни поворачивался он на правый бок, он неизменно сваливался опять на спину. Закрыв глаза, чтобы не видеть своих барахтающихся ног, он проделал это добрую сотню раз и отказался от этих попыток только тогда, когда почувствовал какую-то неведомую дотоле, тупую и слабую боль в боку. «Ах ты, господи, – подумал он, – какую я выбрал хлопотную профессию! Изо дня в день в разъездах. Деловых волнений куда больше, чем на месте, в торговом доме, а кроме того, изволь терпеть тяготы дороги, думай о расписании поездов, мирись с плохим, нерегулярным питанием, завязывай со все новыми и новыми людьми недолгие\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "\"Ответ должен содержать код статуса 400 и данные в формате json пустой контент\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": null\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "\"Ответ должен содержать код статуса 400 и данные в формате json контент < 50\" Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"TEST\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ должен содержать код 404, попытка добавить без юзера",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Проснувшись однажды утром после беспокойного сна, Грегор Замза обнаружил, что он у себя в постели превратился в страшное насекомое. Лежа на панцирнотвердой спине, он видел, стоило ему приподнять голову, свой коричневый, выпуклый, разделенный дугообразными чешуйками живот, на верхушке которого еле держалось готовое вот-вот окончательно сползти одеяло. Его многочисленные, убого тонкие по сравнению с остальным телом ножки беспомощно копошились у него перед глазами. «Что со мной случилось?» – подумал он. Это не было сном. Его комната, настоящая, разве что слишком маленькая, но обычная комната, мирно покоилась в своих четырех хорошо знакомых стенах. Над столом, где были разложены распакованные образцы сукон – Замза был коммивояжером, – висел портрет, который он недавно вырезал из иллюстрированного журнала и вставил в красивую золоченую рамку. На портрете была изображена дама в меховой шляпе и боа, она сидела очень прямо и протягивала зрителю тяжелую меховую муфту, в которой целиком исчезала ее рука. Затем взгляд Грегора устремился в окно, и пасмурная погода – слышно было, как по жести подоконника стучат капли дождя – привела его и вовсе в грустное настроение. «Хорошо бы еще немного поспать и забыть всю эту чепуху», – подумал он, но это было совершенно неосуществимо, он привык спать на правом боку, а в теперешнем своем состоянии он никак не мог принять этого положения. С какой бы силой ни поворачивался он на правый бок, он неизменно сваливался опять на спину. Закрыв глаза, чтобы не видеть своих барахтающихся ног, он проделал это добрую сотню раз и отказался от этих попыток только тогда, когда почувствовал какую-то неведомую дотоле, тупую и слабую боль в боку. «Ах ты, господи, – подумал он, – какую я выбрал хлопотную профессию! Изо дня в день в разъездах. Деловых волнений куда больше, чем на месте, в торговом доме, а кроме того, изволь терпеть тяготы дороги, думай о расписании поездов, мирись с плохим, нерегулярным питанием, завязывай со все новыми и новыми людьми недолгие\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ должен содержать код 404, попытка добавить без ивента",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Проснувшись однажды утром после беспокойного сна, Грегор Замза обнаружил, что он у себя в постели превратился в страшное насекомое. Лежа на панцирнотвердой спине, он видел, стоило ему приподнять голову, свой коричневый, выпуклый, разделенный дугообразными чешуйками живот, на верхушке которого еле держалось готовое вот-вот окончательно сползти одеяло. Его многочисленные, убого тонкие по сравнению с остальным телом ножки беспомощно копошились у него перед глазами. «Что со мной случилось?» – подумал он. Это не было сном. Его комната, настоящая, разве что слишком маленькая, но обычная комната, мирно покоилась в своих четырех хорошо знакомых стенах. Над столом, где были разложены распакованные образцы сукон – Замза был коммивояжером, – висел портрет, который он недавно вырезал из иллюстрированного журнала и вставил в красивую золоченую рамку. На портрете была изображена дама в меховой шляпе и боа, она сидела очень прямо и протягивала зрителю тяжелую меховую муфту, в которой целиком исчезала ее рука. Затем взгляд Грегора устремился в окно, и пасмурная погода – слышно было, как по жести подоконника стучат капли дождя – привела его и вовсе в грустное настроение. «Хорошо бы еще немного поспать и забыть всю эту чепуху», – подумал он, но это было совершенно неосуществимо, он привык спать на правом боку, а в теперешнем своем состоянии он никак не мог принять этого положения. С какой бы силой ни поворачивался он на правый бок, он неизменно сваливался опять на спину. Закрыв глаза, чтобы не видеть своих барахтающихся ног, он проделал это добрую сотню раз и отказался от этих попыток только тогда, когда почувствовал какую-то неведомую дотоле, тупую и слабую боль в боку. «Ах ты, господи, – подумал он, – какую я выбрал хлопотную профессию! Изо дня в день в разъездах. Деловых волнений куда больше, чем на месте, в торговом доме, а кроме того, изволь терпеть тяготы дороги, думай о расписании поездов, мирись с плохим, нерегулярным питанием, завязывай со все новыми и новыми людьми недолгие\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ должен содержать код 400, попытка отредактировать не отправителем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Проснувшись однажды утром после беспокойного сна, Грегор Замза обнаружил, что он у себя в постели превратился в страшное насекомое. Лежа на панцирнотвердой спине, он видел, стоило ему приподнять голову, свой коричневый, выпуклый, разделенный дугообразными чешуйками живот, на верхушке которого еле держалось готовое вот-вот окончательно сползти одеяло. Его многочисленные, убого тонкие по сравнению с остальным телом ножки беспомощно копошились у него перед глазами. «Что со мной случилось?» – подумал он. Это не было сном. Его комната, настоящая, разве что слишком маленькая, но обычная комната, мирно покоилась в своих четырех хорошо знакомых стенах. Над столом, где были разложены распакованные образцы сукон – Замза был коммивояжером, – висел портрет, который он недавно вырезал из иллюстрированного журнала и вставил в красивую золоченую рамку. На портрете была изображена дама в меховой шляпе и боа, она сидела очень прямо и протягивала зрителю тяжелую меховую муфту, в которой целиком исчезала ее рука. Затем взгляд Грегора устремился в окно, и пасмурная погода – слышно было, как по жести подоконника стучат капли дождя – привела его и вовсе в грустное настроение. «Хорошо бы еще немного поспать и забыть всю эту чепуху», – подумал он, но это было совершенно неосуществимо, он привык спать на правом боку, а в теперешнем своем состоянии он никак не мог принять этого положения. С какой бы силой ни поворачивался он на правый бок, он неизменно сваливался опять на спину. Закрыв глаза, чтобы не видеть своих барахтающихся ног, он проделал это добрую сотню раз и отказался от этих попыток только тогда, когда почувствовал какую-то неведомую дотоле, тупую и слабую боль в боку. «Ах ты, господи, – подумал он, – какую я выбрал хлопотную профессию! Изо дня в день в разъездах. Деловых волнений куда больше, чем на месте, в торговом доме, а кроме того, изволь терпеть тяготы дороги, думай о расписании поездов, мирись с плохим, нерегулярным питанием, завязывай со все новыми и новыми людьми недолгие\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ответ должен содержать код 400, попытка отредактировать не сущ. комментарий",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"content\": \"Душа моя озарена неземной радостью, как эти чудесные весенние утра, которыми я наслаждаюсь от всего.\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Лайк -> usefulness должна повыситься на 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.not.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).equals(1);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Дизлайк -> usefulness == 0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.not.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).equals(0);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Дизлайк -> usefulness == -1 Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.not.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).equals(-1);});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента владельцем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{deluid}}"
								},
								{
									"key": "commentId",
									"value": "{{commdel}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).to.be.not.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента не владельцем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(400);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "999"
								},
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента владельцем некорр. id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "1"
								},
								{
									"key": "commentId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "Получение коммента по Id Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null и с расширенной инфой\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).to.be.not.null;\r",
									"    pm.expect(target.event.id).to.be.not.null;\r",
									"    pm.expect(target.event.annotation).to.be.not.null;\r",
									"    pm.expect(target.event.title).to.be.not.null;\r",
									"    pm.expect(target.author.id).to.be.not.null;\r",
									"    pm.expect(target.author.name).to.be.not.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение коммента по Id некорр. id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента не владельцем, а админом некорр. id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(404);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление коммента не владельцем, а админом Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(204);  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "public",
			"item": [
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"        pm.collectionVariables.set(\"initiator\", event.initiator.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1050);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    1000 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1050);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    1000 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1050);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    1000 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DISLIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по дате по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(5);\r",
									"    pm.expect(target[1].id).equals(4);\r",
									"    pm.expect(target[2].id).equals(3);\r",
									"    pm.expect(Date.parse(target[0].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[2].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:eventId?sortValue=DATE&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по дате по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(3);\r",
									"    pm.expect(target[1].id).equals(4);\r",
									"    pm.expect(target[2].id).equals(5);\r",
									"    pm.expect(Date.parse(target[2].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[0].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:eventId?sortValue=DATE&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по пользе по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(3);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(4);\r",
									"    pm.expect(target[0].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[2].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:eventId?sortValue=USEFULNESS&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "false"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по пользе по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(4);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(3);\r",
									"    pm.expect(target[2].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[0].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:eventId?sortValue=USEFULNESS&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "true"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id инициатора cобытия Сорт по дате по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(5);\r",
									"    pm.expect(target[1].id).equals(4);\r",
									"    pm.expect(target[2].id).equals(3);\r",
									"    pm.expect(Date.parse(target[0].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[2].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/events?sortValue=DATE&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"events"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "false"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{initiator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id инициатора cобытия Сорт по дате по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(3);\r",
									"    pm.expect(target[1].id).equals(4);\r",
									"    pm.expect(target[2].id).equals(5);\r",
									"    pm.expect(Date.parse(target[2].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[0].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/events?sortValue=DATE&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"events"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{initiator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id инициатора cобытия Сорт по пользе по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(3);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(4);\r",
									"    pm.expect(target[0].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[2].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/events?sortValue=USEFULNESS&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"events"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "false"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{initiator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id инициатора cобытия Сорт по пользе по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(4);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(3);\r",
									"    pm.expect(target[2].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[0].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/events?sortValue=USEFULNESS&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"events"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "true"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{initiator}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid2\", user.id)\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1050);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    1000 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1050);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    1000 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":eventId"
							],
							"query": [
								{
									"key": "content",
									"value": "{{content}}",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIKE Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid1\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "commentId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid1\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/like",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"like"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "commentId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DISLIKE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid1\", user.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            // выполняем наш скрипт\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comment/:commentId/dislike",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comment",
								":commentId",
								"dislike"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid1}}"
								},
								{
									"key": "commentId",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id отправителя Сорт по дате по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(7);\r",
									"    pm.expect(target[1].id).equals(6);\r",
									"    pm.expect(target[2].id).equals(5);\r",
									"     pm.expect(Date.parse(target[0].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[2].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/user?sortValue=DATE&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"user"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "false"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id отправителя Сорт по дате по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(5);\r",
									"    pm.expect(target[1].id).equals(6);\r",
									"    pm.expect(target[2].id).equals(7);\r",
									"    pm.expect(Date.parse(target[2].created)).to.be.above(Date.parse(target[1].created));\r",
									"    pm.expect(Date.parse(target[1].created)).to.be.above(Date.parse(target[0].created));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/user?sortValue=DATE&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"user"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "DATE"
								},
								{
									"key": "asc",
									"value": "true"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по пользе по убыванию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(6);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(7);\r",
									"    pm.expect(target[0].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[2].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/user?sortValue=USEFULNESS&asc=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"user"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "false"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментod по Id cобытия Сорт по пользе по возрастанию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('created');\r",
									"pm.expect(target[0]).to.have.property('updated');\r",
									"pm.expect(target[0]).to.have.property('event');\r",
									"pm.expect(target[0]).to.have.property('author');\r",
									"pm.expect(target[0]).to.have.property('text');\r",
									"pm.expect(target[0]).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target[0].id).to.be.not.null;\r",
									"    pm.expect(target[1].id).to.be.not.null;\r",
									"    pm.expect(target[2].id).to.be.not.null;\r",
									"    pm.expect(target[0].created).to.be.not.null;\r",
									"    pm.expect(target[0].updated).to.be.null;\r",
									"    pm.expect(target[0].event).to.be.not.null;\r",
									"    pm.expect(target[0].author).to.be.not.null;\r",
									"    pm.expect(target[0].text).to.be.not.null;\r",
									"    pm.expect(target[0].usefulness).to.be.not.null;\r",
									"});\r",
									"pm.test(\"Проверка сортировки\", function() {\r",
									"    pm.expect(target[0].id).equals(7);\r",
									"    pm.expect(target[1].id).equals(5);\r",
									"    pm.expect(target[2].id).equals(6);\r",
									"    pm.expect(target[2].usefulness).to.be.above(target[1].usefulness);\r",
									"    pm.expect(target[1].usefulness).to.be.above(target[0].usefulness);;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/:userId/user?sortValue=USEFULNESS&asc=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								":userId",
								"user"
							],
							"query": [
								{
									"key": "sortValue",
									"value": "USEFULNESS"
								},
								{
									"key": "asc",
									"value": "true"
								},
								{
									"key": "test",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение коммента по Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"В ответе должны быть все поля, а updated == null\", function(){\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('updated');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('usefulness');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Данные должны быть не null\", function() {\r",
									"    pm.expect(target.id).to.be.not.null;\r",
									"    pm.expect(target.created).to.be.not.null;\r",
									"    pm.expect(target.updated).to.be.null;\r",
									"    pm.expect(target.event).to.be.not.null;\r",
									"    pm.expect(target.author).to.be.not.null;\r",
									"    pm.expect(target.text).to.be.not.null;\r",
									"    pm.expect(target.usefulness).to.be.not.null;\r",
									"    pm.expect(target.text).equal(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor. \");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comment/comment/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comment",
								"comment",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComments(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comment/\" + eventId, comment, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ut aliquam enim. Morbi mattis convallis lectus vitae pharetra. Quisque at vehicula ante. Vestibulum laoreet metus non urna elementum imperdiet. Donec scelerisque bibendum dolor, ac accumsan massa faucibus a. Quisque sed pulvinar mauris. Ut bibendum, turpis efficitur ultrices mollis, tortor tortor.\",",
					"        }",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "content",
			"value": "",
			"disabled": true
		},
		{
			"key": "comment1",
			"value": "",
			"type": "string",
			"disabled": true
		},
		{
			"key": "initiator",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "uid2",
			"value": ""
		},
		{
			"key": "deluid",
			"value": ""
		},
		{
			"key": "commdel",
			"value": ""
		}
	]
}